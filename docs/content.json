{"meta":{"title":"希言自然","subtitle":"QQ群：181849313 入群密码：fhit","description":"烽火信息科技 猎狐软件","author":"ddao","url":"https://ddao.wang","root":"/"},"pages":[{"title":"index","date":"2019-01-31T10:20:56.000Z","updated":"2020-07-08T09:09:57.122Z","comments":true,"path":"about/index.html","permalink":"https://ddao.wang/about/index.html","excerpt":"","text":""}],"posts":[{"title":"CentOS下使用yum安装Nginx","slug":"linux/nginx_setup","date":"2020-07-07T14:36:22.000Z","updated":"2020-07-08T09:09:57.106Z","comments":true,"path":"2020/07/07/linux/nginx_setup/","link":"","permalink":"https://ddao.wang/2020/07/07/linux/nginx_setup/","excerpt":"","text":"首先让我们认识一下，Nginx的创始人伊戈尔·赛索耶夫 Nginx 可以在大多数 UnixLinux OS 上编译运行，并有 Windows 移植版。 Nginx 的1.4.0稳定版已经于2013年4月24日发布，一般情况下，对于新建站点，建议使用最新稳定版作为生产版本，已有站点的升级急迫性不高。Nginx 的源代码使用 2-clause BSD-like license。 Nginx 是一个很强大的高性能Web和反向代理服务，它具有很多非常优越的特性： 在连接高并发的情况下，Nginx是Apache服务不错的替代品：Nginx在美国是做虚拟主机生意的老板们经常选择的软件平台之一。能够支持高达 50,000 个并发连接数的响应，感谢Nginx为我们选择了 epoll and kqueue作为开发模型。 当使用以下命令安装Nginx时，发现无法安装成功。 1yum install -y nginx 需要做一点处理。 安装Nginx源执行以下命令： 12rpm -ivh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm 安装该rpm后，我们就能在/etc/yum.repos.d/ 目录中看到一个名为nginx.repo 的文件。 安装Nginx安装完Nginx源后，就可以正式安装Nginx了。 1yum install -y nginx Nginx默认目录输入命令： 1whereis nginx 即可看到类似于如下的内容： 1nginx: /usr/sbin/nginx /usr/lib64/nginx /etc/nginx /usr/share/nginx 以下是Nginx的默认路径：(1) Nginx配置路径：/etc/nginx/(2) PID目录：/var/run/nginx.pid(3) 错误日志：/var/log/nginx/error.log(4) 访问日志：/var/log/nginx/access.log(5) 默认站点目录：/usr/share/nginx/html 事实上，只需知道Nginx配置路径，其他路径均可在/etc/nginx/nginx.conf 以及/etc/nginx/conf.d/default.conf 中查询到。 常用命令 123456789101112131415(1) 启动：nginx(2) 测试Nginx配置是否正确：nginx -t(3) 优雅重启：nginx -s reload(4) 查看nginx的进程号：ps -ef |grep nginx(5)nginx服务停止nginx -s stopkill -9 pid 当然，Nginx也可以编译源码安装，步骤相对要繁琐一些。总的来说，使用yum安装Nginx还是比较简单的，如无特殊需求，Nginx完全没有必要源码编译安装。","categories":[{"name":"软件开发","slug":"软件开发","permalink":"https://ddao.wang/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"},{"name":"软件部署","slug":"软件开发/软件部署","permalink":"https://ddao.wang/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/%E8%BD%AF%E4%BB%B6%E9%83%A8%E7%BD%B2/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://ddao.wang/tags/linux/"},{"name":"nginx","slug":"nginx","permalink":"https://ddao.wang/tags/nginx/"}]},{"title":"CentOS 7搭建本地yum源","slug":"linux/custom_yum","date":"2020-07-07T11:26:05.000Z","updated":"2020-07-08T09:09:57.106Z","comments":true,"path":"2020/07/07/linux/custom_yum/","link":"","permalink":"https://ddao.wang/2020/07/07/linux/custom_yum/","excerpt":"","text":"前言 大家在工作中肯定或多或少的会遇到使用yum源；比如前几天在部署CentOS测试环境，在安装各种中间件的时候，发现各种依赖都没有；后来一检查，发现安装的操作系统是CentOS Mini版，好吧，我认了； 为了完成测试环境的搭建，我就搭建了一个局域网的yum源。本来搭建本地的yum源也没有多大的难度，但是服务器都在内网，所以就需要搭建局域网的yum源。说到yum源搭建，主要有以下两种方式： 搭建本地yum源 搭建局域网yum源 无非就这两种，下面就分别对这两种yum源的搭建方式进行总结。 搭建本地yum源 本地yum源，就意味着只有搭建该yum源的这台服务器能使用，其它的服务器都不能使用该yum源。搭建本地yum源的所有步骤如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243# 在/mnt目录创建挂载镜像的文件夹cd /mntmkdir iso# 将iso镜像挂载到/mnt/iso目录mount -o loop CentOS-7-x86_64-DVD-1810.iso /mnt/iso# 如果iso镜像已经加载至CentOS系统，采用如下命令，加载光驱至/mnt/iso目录mount -t iso9660 /dev/sr0 /mnt/iso# 当然你也可以把所有文件都复制到/mnt/iso目录# 挂载成功后可以使用df -h命令查看[root@*.*.*.*]# df -hFilesystem Size Used Avail Use% Mounted on/dev/mapper/centos-root 29G 5.3G 23G 19% /devtmpfs 484M 0 484M 0% /devtmpfs 496M 0 496M 0% /dev/shmtmpfs 496M 6.8M 489M 2% /runtmpfs 496M 0 496M 0% /sys/fs/cgroup/dev/sda1 1014M 132M 883M 13% /boottmpfs 100M 0 100M 0% /run/user/0tmpfs 100M 0 100M 0% /run/user/1000/dev/loop0 4.3G 4.3G 0 100% /mnt/iso# 修改yum配置文件cd /etc/yum.repos.d# 先备份配置文件mkdir bakmv *.repo ./bak# 将备份的CentOS-Media.repo文件拷贝出来cp ./bak/CentOS-Media.repo ./# 修改CentOS-Media.repo配置文件，修改后内容如下：[c7-media]name=CentOS-$releasever - Media#baseurl=file:///media/CentOS/# file:///media/cdrom/# file:///media/cdrecorder/baseurl=file:///mnt/iso/gpgcheck=1enabled=1 # 设置为1gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7 至此搭建本地yum源的操作完成，接下来我们清除原有的yum信息： 1yum clean all 这样，一个崭新的本地yum源就可以使用了。 搭建局域网yum源 除了可以搭建本地yum源外，我们还可以基于HTTP方式配置yum源，这样我们就可以配置一个局域网内都可以使用的yum源。 一般都是通过Nginx来搭建HTTP的yum源，首先搭建Nginx，这里就不细说如何搭建Nginx了。接下来将iso镜像文件解压缩到一个目录。现在，我们就可以配置Nginx配置文件了。不建议直接修改nginx.conf，而是在/etc/nginx/conf.d/目录下创建一个新的conf文件，如yum.conf，文件内容如下： 12345678server &#123; listen 8080; server_name localhost; location &#x2F; &#123; autoindex on; root &#x2F;home&#x2F;jelly&#x2F;iso&#x2F;; # （这里请换成你的实际目录路径） &#125;&#125; 最后，在使用该yum源的机器上，我们开始配置yum的配置文件，在/etc/yum.repos.d新建一个名为Nginx-yum.repo的配置文件，内容如下： 12345678[Nginx-yum]name&#x3D;Nginx-yum# mirrorlist&#x3D;http:&#x2F;&#x2F;mirrorlist.centos.org&#x2F;?release&#x3D;$releasever# &amp;arch&#x3D;$basearch&amp;repo&#x3D;os&amp;infra&#x3D;$infrabaseurl&#x3D;http:&#x2F;&#x2F;*.*.*.*:8080enabled&#x3D;1gpgcheck&#x3D;1gpgkey&#x3D;http:&#x2F;&#x2F;*.*.*.*:8080&#x2F;RPM-GPG-KEY-CentOS-7 至此搭建局域网yum源的操作完成，接下来我们清除原有的yum信息： 1yum clean all 这样，一个崭新的局域网yum源就可以使用了。 如何在yum源中，添加自定义rpm包 首先，看看有外网链接时，如何使用yum安装Nginx。请移步我的另外一篇文章。 比如，内网机器需要安装nginx服务器，想使用yum安装Nginx，如何把nginx包添加到本地yum源中呢？也许有人建议，使用reposync命令同步阿里yum源、网易yum源或者其它yum源，再复制到内网服务器上。网络上也有很多类似教程，真实施起来费时费力，而且需要很大的储存空间。 这里介绍一种办法，既能使用yum解决软件依赖问题，又不用同步庞大的yum源。即使用yum的downloadonly插件来下载rpm包和依赖包。 12345# 下载安装yumdownloadonly插件yum install yum-plugin-downloadonly# 下载到指定目录（依赖包会一起下载）yum install --downloadonly --downloaddir=/root/nginx nginx 把rpm包及依赖包通过光盘等方式复制到内网服务器上，制作本地yum源。 1234567# 安装createrepo命令。yum -y install createrepo# 重建yum源的索引，/mnt/ios/目录下会多出一个repodata的目录createrepo -v /mnt/ios/ # createrepo命令耗时较长，如果只是添加少量rpm包，可以使用--updata参数，# 大大减少建立索引的时间。createrepo --update /mnt/iso/ 使用该局域网yum源的机器，执行以下命令，就可以更新yum源数据了。 12#yum clean all#yum makecache 总结这篇文章详细的总结了两种搭建yum源的方法，并介绍了如何添加自定义的rpm包，以及建立yum源的rpm索引。通过这篇文章中总结的方法，足以应对我们日常工作中的需要。好了，东西不多，但是非常实用，希望我这里总结的内容对大家有帮助。","categories":[{"name":"软件开发","slug":"软件开发","permalink":"https://ddao.wang/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"},{"name":"软件部署","slug":"软件开发/软件部署","permalink":"https://ddao.wang/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/%E8%BD%AF%E4%BB%B6%E9%83%A8%E7%BD%B2/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://ddao.wang/tags/linux/"},{"name":"yum","slug":"yum","permalink":"https://ddao.wang/tags/yum/"}]},{"title":"Windows远程桌面(mstsc)不能复制粘贴的解决办法","slug":"windows/rdpclip","date":"2020-07-07T11:17:18.000Z","updated":"2020-07-08T09:09:57.122Z","comments":true,"path":"2020/07/07/windows/rdpclip/","link":"","permalink":"https://ddao.wang/2020/07/07/windows/rdpclip/","excerpt":"","text":"原来通过mstsc远程连接Windows能够直接在本地和服务器之间复制、粘贴一些文字和文件，最近突然无法直接复制粘贴了，只能通过远程映射的本地磁盘方式交换文件，太为繁琐。 首先，已经确认远程桌面连接选项“本地资源→本地设备和资源→剪贴板”中勾选了剪贴板。 解决办法：在远程Windows服务器中重启“rdpclip.exe”进程即可。 1、打开资源管理器，杀掉rdpclip.exe进程； 2、开始→运行，输入：rdpclip.exe，回车重启该进程。 3、此时粘贴文件或者文字发现已经可以粘贴了。","categories":[{"name":"软件开发","slug":"软件开发","permalink":"https://ddao.wang/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"},{"name":"软件部署","slug":"软件开发/软件部署","permalink":"https://ddao.wang/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/%E8%BD%AF%E4%BB%B6%E9%83%A8%E7%BD%B2/"}],"tags":[{"name":"Windows","slug":"Windows","permalink":"https://ddao.wang/tags/Windows/"}]},{"title":"Win7下搭建C++ 编译环境(MSYS2+VSCode)","slug":"windows/c_cpp_setup","date":"2019-12-23T15:49:20.000Z","updated":"2020-07-08T09:09:57.122Z","comments":true,"path":"2019/12/23/windows/c_cpp_setup/","link":"","permalink":"https://ddao.wang/2019/12/23/windows/c_cpp_setup/","excerpt":"","text":"VS Code一个轻量且强大的代码编辑器，支持Windows，OSX和Linux。 内置JavaScript、TypeScript和Node.js支持，而且拥有丰富的插件生态系统，可通过安装插件来支持C++、C#、Python、PHP等其他语言。 这篇文章就为大家分享一下VS Code配置C/C++开发环境的具体步骤，也作为作者配置C/C++开发环境过程的备忘。 准备工作 下载MSYS2前往MSYS2官网下载页面:MSYS2安装请参考官网安装指南(64位系统只要安装MSYS2 MinGW 64-bit)。 下载VS Code前往VS Code官网的下载页面: 安装步骤 安装VS Code和MSYS2软件按VS Code和MSYS2官网安装指南进行安装。 配置MSYS2国内镜像(清华大学开源软件镜像站) 1234567891011pacman 的配置编辑 /etc/pacman.d/mirrorlist.mingw32 ，在文件开头添加：Server = https://mirrors.tuna.tsinghua.edu.cn/msys2/mingw/i686编辑 /etc/pacman.d/mirrorlist.mingw64 ，在文件开头添加：Server = https://mirrors.tuna.tsinghua.edu.cn/msys2/mingw/x86_64编辑 /etc/pacman.d/mirrorlist.msys ，在文件开头添加：Server = https://mirrors.tuna.tsinghua.edu.cn/msys2/msys/$arch然后执行 pacman -Sy 刷新软件包数据即可。 安装GNU工具包 12pacman -S mingw-w64-i686-toolchainpacman -S mingw-w64-x86_64-toolchain 设置环境变量 1右键我的电脑--&gt;属性--&gt;高级系统设置--&gt;点击环境变量--&gt;选择Path--&gt;编辑 验证开发环境 12gcc --versiong++ --version 配置VS Code安装C/C++扩展(微软) 环境验证编写Hello World程序 12345678910#include&lt;iostream&gt;int main(void) &#123; long int tag = __cplusplus; if(tag == 201703L) std::cout &lt;&lt; \"C++17\\n\"; else if(tag == 201402L) std::cout &lt;&lt; \"C++14\\n\"; else if(tag == 201103L) std::cout &lt;&lt; \"C++11\\n\"; else if(tag == 199711L) std::cout &lt;&lt; \"C++98\\n\"; else std::cout &lt;&lt; \"pre-standard C++\\n\" return 0;&#125; 配置tasks.json、launch.json、c_cpp_properties.json文件 后续以上是VS Code单文件的C/C++开发环境的搭建，适合写个HelloWorld程序；实际开发需要多文件开发环境，请继续关注！ 备注Cygwin、MinGw、mingw-w64,MSys msys2区别与联系 1234567891011121314151617181920gcc.gnu.orgmingw-w64.orgmsys2.orga、从目标上说MinGW 是让Windows 用户可以用上GNU 工具，比如GCC。Cygwin 提供完整的类Unix 环境，Windows 用户不仅可以使用GNU 工具，理论 上Linux 上的程序只要用Cygwin 重新编译，就可以在Windows 上运行。b、从能力上说如果程序只用到C&#x2F;C++ 标准库，可以用MinGW 或Cygwin 编译。如果程序还用到了POSIX API，则只能用Cygwin 编译。c、从依赖上说程序经MinGW 编译后可以直接在Windows 上面运行。程序经Cygwin 编译后运行，需要依赖安装时附带的cygwin1.dll。 MSYS2是MSYS的一个升级版,准确的说是集成了pacman和Mingw-w64的Cygwin升级版, 提供了bash shell等linux环境、版本控制软件（git&#x2F;hg）和MinGW-w64 工具链。与MSYS最大的区别是移植了 Arch Linux的软件包管理系统 Pacman(其实是与Cygwin的区别)","categories":[{"name":"软件开发","slug":"软件开发","permalink":"https://ddao.wang/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"},{"name":"软件部署","slug":"软件开发/软件部署","permalink":"https://ddao.wang/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/%E8%BD%AF%E4%BB%B6%E9%83%A8%E7%BD%B2/"}],"tags":[{"name":"C/Cpp","slug":"C-Cpp","permalink":"https://ddao.wang/tags/C-Cpp/"},{"name":"VSCode","slug":"VSCode","permalink":"https://ddao.wang/tags/VSCode/"}]},{"title":"CentOS下使用yum安装MariaDB","slug":"web/mariadb_setup","date":"2019-12-23T15:47:29.000Z","updated":"2020-07-08T09:09:57.122Z","comments":true,"path":"2019/12/23/web/mariadb_setup/","link":"","permalink":"https://ddao.wang/2019/12/23/web/mariadb_setup/","excerpt":"","text":"首先让我们认识一下，MySQL的创始人Michael Widenius，1962年3月3日出生于芬兰赫尔辛基，MySQL的CTO及共同创始人。Monty Widenius撰写了MySQL的95%服务器端代码。 MariaDB由MySQL的创始人Michael Widenius（英语：Michael Widenius）主导开发，他早前曾以10亿美元的价格，将自己创建的公司MySQL AB卖给了SUN。此后，随着SUN被甲骨文收购，MySQL的所有权也落入Oracle的手中。MariaDB名称来自Michael Widenius的女儿Maria的名字。MariaDB数据库管理系统是MySQL的一个分支，主要由开源社区在维护，采用GPL授权许可 MariaDB的目的是完全兼容MySQL，包括API和命令行，使之能轻松成为MySQL的代替品。在存储引擎方面，使用XtraDB（英语：XtraDB）来代替MySQL的InnoDB。 MariaDB直到5.5版本，均依照MySQL的版本。因此，使用MariaDB5.5的人会从MySQL 5.5中了解到MariaDB的所有功能。从2012年11月12日起发布的10.0.0版开始，不再依照MySQL的版号。10.0.x版以5.5版为基础，加上移植自MySQL 5.6版的功能和自行开发的新功能。 安装环境有的centos7已经默认安装了Mariadb，可以查看自己的有没有安装，没有安装的再进行安装，已经安装了可以不用安装，也可以卸载了重装。 1234#卸载命令# yum remove mariadb-server# cat /etc/redhat-releaseCentOS Linux release 7.5.1804 (Core) 安装MariaDB通过yum安装就行了。简单快捷，安装mariadb-server，默认依赖安装mariadb，一个是服务端、一个是客户端。 1# yum -y install mariadb-server 配置MariaDB 安装完成后首先要把MariaDB服务开启，并设置为开机启动 12# systemctl start mariadb # 开启服务# systemctl enable mariadb # 设置为开机自启动服务 首次安装需要进行数据库的配置，命令都和mysql的一样 1# mysql_secure_installation 配置选项说明 123456789101112# 输入数据库超级管理员root的密码(注意不是系统root的密码)，# 第一次进入还没有设置密码则直接回车Enter current password for root (enter for none): Set root password? [Y/n] # 设置密码，yNew password: # 新密码Re-enter new password: # 再次输入密码Remove anonymous users? [Y/n] # 移除匿名用户， y# 拒绝root远程登录，n，不管y/n，都会拒绝root远程登录Disallow root login remotely? [Y/n] # 删除test数据库，y：删除。n：不删除，数据库中会有一个test数据库，一般不需要Remove test database and access to it? [Y/n] Reload privilege tables now? [Y/n] # 重新加载权限表，y。或者重启服务也许 测试是否能够登录成功，出现”MariaDB [(none)]&gt;”， 就表示已经能够正常登录使用MariaDB数据库了。 1234567891011# mysql -u root -pEnter password:Welcome to the MariaDB monitor. Commands end with ; or \\g.Your MariaDB connection id is 8Server version: 5.5.60-MariaDB MariaDB ServerCopyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.Type 'help;'or'\\h' for help. Type '\\c' to clear the current input statement.MariaDB [(none)]&gt; 设置字符集设置MariaDB字符集为utf-8，修改”/etc/my.cnf”，”/etc/my.cnf.d/client.cnf”，”/etc/my.cnf.d/mysql-clients.cnf”三个文件。 123456789101112131415161718#&#x2F;etc&#x2F;my.cnf在[mysqld]标签下添加init_connect&#x3D;&#39;SET collation_connection &#x3D; utf8_unicode_ci&#39;init_connect&#x3D;&#39;SET NAMES utf8&#39;character-set-server&#x3D;utf8collation-server&#x3D;utf8_unicode_ciskip-character-set-client-handshake#&#x2F;etc&#x2F;my.cnf.d&#x2F;client.cnf在[client]标签下添加default-character-set&#x3D;utf8#&#x2F;etc&#x2F;my.cnf.d&#x2F;mysql-clients.cnf在[mysql]标签下添加default-character-set&#x3D;utf8#重启服务#systemctl restart mariadb 进入mariadb查看字符集 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051#配置字符集前MariaDB [(none)]&gt; show variables like \"%character%\";show variables like \"%collation%\";+--------------------------+----------------------------+| Variable_name | Value |+--------------------------+----------------------------+| character_set_client | utf8 || character_set_connection | utf8 || character_set_database | latin1 || character_set_filesystem | binary || character_set_results | utf8 || character_set_server | latin1 || character_set_system | utf8 || character_sets_dir | /usr/share/mysql/charsets/ |+--------------------------+----------------------------+8 rows in set (0.01 sec)+----------------------+-------------------+| Variable_name | Value |+----------------------+-------------------+| collation_connection | utf8_general_ci || collation_database | latin1_swedish_ci || collation_server | latin1_swedish_ci |+----------------------+-------------------+3 rows in set (0.00 sec)#配置字符集后MariaDB [(none)]&gt; show variables like \"%character%\";show variables like \"%collation%\";+--------------------------+----------------------------+| Variable_name | Value |+--------------------------+----------------------------+| character_set_client | utf8 || character_set_connection | utf8 || character_set_database | utf8 || character_set_filesystem | binary || character_set_results | utf8 || character_set_server | utf8 || character_set_system | utf8 || character_sets_dir | /usr/share/mysql/charsets/ |+--------------------------+----------------------------+8 rows in set (0.00 sec)+----------------------+-----------------+| Variable_name | Value |+----------------------+-----------------+| collation_connection | utf8_unicode_ci || collation_database | utf8_unicode_ci || collation_server | utf8_unicode_ci |+----------------------+-----------------+3 rows in set (0.00 sec) 远程访问数据库MariaDB默认是拒绝root远程登录的。先查看mysql数据库中的user表： 12345678910MariaDB [(none)]&gt; select host,user from mysql.user;+-----------------------+------+| host | user |+-----------------------+------+| 127.0.0.1 | root || ::1 | root || localhost | root || localhost.localdomain | root |+-----------------------+------+5 rows in set (0.00 sec) 127.0.0.1，::1，localhost三个都是指本机； 给root用户添加远程访问权限 12345678910111213# 所有IP都可以使用root连接；\"%\"表示针对所有IP，\"password\"表示将用这个密码登录，# 可以和本机登录root的密码不一样(root在不同IP登录，采用不一样的密码)。MariaDB [(none)]&gt; GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIEDBY 'password' WITH GRANT OPTION;#只让某个IP段(192.168.1.xx)的主机连接，可以修改为\"192.168.1.%\"；MariaDB [(none)]&gt; GRANT ALL PRIVILEGES ON *.* TO 'root'@'192.168.1.%'IDENTIFIED BY 'password' WITH GRANT OPTION;#刷新权限MariaDB [(none)]&gt; flush privileges;#或者重启MariaDB服务也可以(二选一即可)#systemctl restart mariadb 创建新的用户，并赋予远程访问权限 12345#创建用户user,可远程登陆,密码为\"password\"；CREATE USER 'user'@'%' IDENTIFIED BY \"password\";#*.*是指所有库的所有表，可以限制权限指定数据库，或指定数据库的哪些表GRANT ALL PRIVILEGES ON *.* TO 'user'@'%' IDENTIFIED BY 'password' WITHGRANT OPTION; 访问客户端使用Navicat客户端进行访问MariaDB数据库;如果上面配置都没出错,你应该可以看到以下页面:","categories":[{"name":"软件开发","slug":"软件开发","permalink":"https://ddao.wang/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"},{"name":"软件部署","slug":"软件开发/软件部署","permalink":"https://ddao.wang/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/%E8%BD%AF%E4%BB%B6%E9%83%A8%E7%BD%B2/"}],"tags":[{"name":"MariaDB","slug":"MariaDB","permalink":"https://ddao.wang/tags/MariaDB/"},{"name":"CentOS","slug":"CentOS","permalink":"https://ddao.wang/tags/CentOS/"}]},{"title":"CentOS7下快速搭建LNMP环境","slug":"web/lnmp_setup","date":"2019-12-23T15:46:54.000Z","updated":"2020-07-08T09:09:57.122Z","comments":true,"path":"2019/12/23/web/lnmp_setup/","link":"","permalink":"https://ddao.wang/2019/12/23/web/lnmp_setup/","excerpt":"","text":"LNMP：Linux+Nginx+MySql+PHP 安装NginxNginx的正确读法应该是Engine X。详细请参考我的另一篇文章: CentOS下使用yum安装Nginx。安装成功后，启动nginx应该就可以看到熟悉的欢迎界面. 1234#rpm -ivh http://nginx.org/packages/centos/7/noarch/RPMS/ nginx-release-centos-7-0.el7.ngx.noarch.rpm#yum -y install nginx#systemctl start nginx 安装MariaDB详细请参考我的另一篇文章:CentOS7下使用yum安装MariaDB。安装成功后，启动MariaDB；使用Navicat客户端连接数据库，应该就可以看到熟悉的连接成功提示信息。 12#yum -y install mariadb-server#systemctl start mariadb 安装PHP7.2.24[remi版本]配置yum源安装php72w，是需要配置额外的yum源地址的。 epel-release remi 12yum install epel-release -yyum install http://rpms.remirepo.net/enterprise/remi-release-7.rpm 注：remi源依赖epel-release源，安装之前必须先安装epel-release源。remi源版本更新比webtatic源快，并且是CentOS建议的yum源。 安装PHP和扩展包PHP对于扩展库很多，根据需要安装PHP和相关扩展包。其中，cli、fpm、common和devel一般都要安装，其它模块看自己需要进行安装。 1234yum -y install php72yum -y install php72-php-fpm php72-php-gd php72-php-json php72-php-mbstring php72-php-mysqlnd php72-php-xml php72-php-xmlrpc php72-php-opcache php72-php-crypt 启动php-fpm 1#systemctl start php72-php-fpm 查看PHP版本，出现如下图提示，说明PHP已安装成功。可输入php72 -m命令，查看PHP已安装模块。 注：最好创建一个软链接，就可以直接执行”php -v”。 1sudo ln -s /opt/remi/php72/root/usr/bin/php /usr/bin/php 安装PHP7.2.24[webtatic版本]配置yum源4[webtatic版本]安装php72w，是需要配置额外的yum源地址的。 epel-release webtatic 12yum install epel-release -yrpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm 注：webtatic源依赖epel-release源，安装之前，必须先安装epel-release源。 清除PHP历史版本为了防止centos上面发生php冲突，清楚PHP历史版本。 1yum -y remove php* 安装PHP和扩展包PHP对于扩展库很多，根据需要安装PHP和相关扩展包。其中，cli、fpm、common和devel一般都要安装，其它模块看自己需要进行安装。 123yum -y install php72w php72w-cli php72w-fpm php72w-common php72w-devel php72w-embedded php72w-gd php72w-mbstring php72w-mysqlnd php72w-opcache php72w-pdo php72w-xml 启动php-fpm1#systemctl start php-fpm 查看PHP版本，出现如下图提示，说明PHP已安装成功。可输入php -m命令，查看PHP已安装模块。 配置nginx切换到文件夹”/etc/nginx/conf.d/“，编辑文件default.conf。取消”location ~ .php”的注释，并修改root和fastcgi_param的值，具体如下： 123456789... ...location ~ \\.php$ &#123; root /usr/share/nginx/html; fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include fastcgi_params;&#125;... ... 运行命令”nginx -s reload”，重新启动nginx。 切换至文件夹”/usr/share/nginx/html/“，创建文件info.php，内容如下： 12&lt;?phpphpinfo(); 打开浏览器，输入该ngxin服务器的IP地址，可以看到熟悉的PHPInfo页面： 设置开机启动1234567#systemctl enable nginx#systemctl daemon-reload#systemctl enable mariadb #systemctl daemon-reload // webtatic版本#systemctl enable php-fpm // remi版本#systemctl enable php72-php-fpm#systemctl daemon-reload 服务启动、停止、状态查看123456789101112131415# 开启服务#systemctl start nginx#systemctl start mariadb #systemctl start php-fpm // webtatic版本#systemctl start php72-php-fpm // remi版本# 停止服务#systemctl stop nginx#systemctl stop mariadb #systemctl stop php-fpm // webtatic版本#systemctl stop php72-php-fpm // remi版本# 查看状态#systemctl status nginx#systemctl status mariadb #systemctl status php-fpm // webtatic版本#systemctl status php72-php-fpm // remi版本 常见错误 “File not found”错误请检查”/etc/nginx/conf.d/default.conf”文件中，root值是否修改正确，再检查fastcgi_param值是否已按要求修改; “无法访问此网站”错误请检查CentOS防火墙80端口是否已设置为允许访问; 1234#配置防火墙，允许80，3306端口远程访问firewall-cmd --zone=public --add-port=80/tcp --permanentfirewall-cmd --zone=public --add-port=3306/tcp --permanentfirewall-cmd --reload # 重启防火墙 常用路径12345# nginx 配置文件/etc/nginx/nginx.conf# nginx 默认项目路径/usr/share/nginx/html 参考1、可供CentOS使用的软件库https://wiki.centos.org/zh/AdditionalResources/Repositories","categories":[{"name":"软件开发","slug":"软件开发","permalink":"https://ddao.wang/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"},{"name":"软件部署","slug":"软件开发/软件部署","permalink":"https://ddao.wang/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/%E8%BD%AF%E4%BB%B6%E9%83%A8%E7%BD%B2/"}],"tags":[{"name":"LNMP","slug":"LNMP","permalink":"https://ddao.wang/tags/LNMP/"},{"name":"-PHP","slug":"PHP","permalink":"https://ddao.wang/tags/PHP/"}]},{"title":"VS Code配置PHP开发环境的方法","slug":"web/php_setup","date":"2019-02-24T13:19:41.000Z","updated":"2020-07-08T09:09:57.122Z","comments":true,"path":"2019/02/24/web/php_setup/","link":"","permalink":"https://ddao.wang/2019/02/24/web/php_setup/","excerpt":"","text":"VS Code一个轻量且强大的代码编辑器，支持Windows，OSX和Linux。 内置JavaScript、TypeScript和Node.js支持，而且拥有丰富的插件生态系统，可通过安装插件来支持C++、C#、Python、PHP等其他语言。 这篇文章就为大家分享一下VS Code配置PHP开发环境的具体步骤，也作为作者配置PHP开发环境过程的备忘。注意了，VS Code和XAMPP都是跨平台，理论上，该教程同样适合OSX、Linux平台。 准备工作：1.下载VS Code前往VS Code官网的下载页面:2.下载xampp，因为套装省事，对于个人使用是很方便。前往XAMPP官网的下载页面，sourceforge的下载页面:3.下载xdebug，记得要对应php版本的，否则无效前往Xdebug官网的下载页面，下载XAMPP对应版本的Xdebug动态链接库。比如，作者选择“xampp-portable-win32-7.3.2-0-VC15.7z”，对应下载7.3版本、32位、NTS的Xdebug动态链接库：”php_xdebug-2.7.0RC2-7.3-vc15.dll”。(Xdebug加TS，标识线程安全) 安装步骤：1.在VS Code安装php相关插件，在首选项里面配置php路径2.安装Xdebug库编辑[xampp安装目录]\\xampp\\php\\php.ini，在文件末尾添加以下代码： 1234[xdebug]zend_extension&#x3D;&quot;[xampp安装目录]&#x2F;xampp&#x2F;php&#x2F;ext&#x2F;php_xdebug-2.5.5-7.1-vc14.dll&quot;xdebug.remote_enable &#x3D; 1xdebug.remote_autostart &#x3D; 1 把Xdebug动态链接库拷贝至[xampp安装目录]\\xampp\\php\\ext\\目录下，运行php.exe -v，验证安装是否正确。你讲看到如下信息： 123456[xampp安装目录]\\xampp\\php&gt;php -vPHP 7.3.2 (cli) (built: Feb 5 2019 23:16:38) ( ZTS MSVC15 (Visual C++ 2017) x86 )Copyright (c) 1997-2018 The PHP GroupZend Engine v3.3.2, Copyright (c) 1998-2018 Zend Technologies with Xdebug v2.7.0RC2, Copyright (c) 2002-2019, by Derick Rethans 最后就可以在VS Code里面设置断点调试了，注意，一定要以打开文件夹的形式才能成功设置断点调试，单个文件无效。","categories":[{"name":"软件开发","slug":"软件开发","permalink":"https://ddao.wang/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://ddao.wang/tags/PHP/"},{"name":"VS Code","slug":"VS-Code","permalink":"https://ddao.wang/tags/VS-Code/"}]},{"title":"VS Code配置PHP开发环境的方法","slug":"web/zmq_setup","date":"2019-02-24T13:19:41.000Z","updated":"2020-07-08T09:09:57.122Z","comments":true,"path":"2019/02/24/web/zmq_setup/","link":"","permalink":"https://ddao.wang/2019/02/24/web/zmq_setup/","excerpt":"","text":"这篇文章就为大家分享一下VS Code配置PHP开发环境的具体步骤，也作为作者配置PHP开发环境过程的备忘。注意了，VS Code和XAMPP都是跨平台，理论上，该教程同样适合OSX、Linux平台。 准备工作：1.下载VS Code前往VS Code官网的下载页面:","categories":[{"name":"软件开发","slug":"软件开发","permalink":"https://ddao.wang/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://ddao.wang/tags/PHP/"},{"name":"VS Code","slug":"VS-Code","permalink":"https://ddao.wang/tags/VS-Code/"}]},{"title":"Centos7安装高版本Cmake","slug":"linux/cmake_setup","date":"2019-02-03T09:54:46.000Z","updated":"2020-07-08T09:09:57.106Z","comments":true,"path":"2019/02/03/linux/cmake_setup/","link":"","permalink":"https://ddao.wang/2019/02/03/linux/cmake_setup/","excerpt":"","text":"环境： 代码编写：Windows 7 x64，Visual Studio 2015 运行环境：CentOS 7.6.1810 (查看CentOS版本：cat /etc/redhat-release) 不知道有没有和我一样，一直混迹于Windows，然后转到Linux编程的同学。尽管网络上对微软产品的喷子很多，但习惯了在Visual Studio编写代码，切换至Linux实在不习惯。尝试了微软的VC_Linux插件，写个Hello World基本没什么问题，但如果用来项目开发，确实觉得它就是个小朋友的玩具而已。 好了，假设你已安装好VC_Linux更好的替代品VisualGDB，使用Visual Studio新建Linux项目，一步一步往下走。默认是MSBuild，都已经跨到Linux平台，还是选择CMake跨平台编译。将会提示没有安装Cmake软件，输入密码后，VisualGDB将自动帮你安装(需要当前用户有执行sudo权限)。似乎一切顺利，点击”Finish”按钮。悲催了，CMake版本过低，虽然提示为3.8以上，最好是安装3.10以上版本。VisualGDB还是很人性化，点击确认按钮，弹出解决办法的网页，可以跟着网页教程一步一步完成CMake的高版本安装。这里我想安装指定版本的CMake，步骤如下： 下载Cmake，下载列表1wget https:&#x2F;&#x2F;cmake.org&#x2F;files&#x2F;dev&#x2F;cmake-3.13.20190131-g92bf7.tar.gz 解压Cmake，看到这么长的文件名，是不是很担心打错了(使用Linux的Tab自动补全功能吧！用过一次，你就会喜欢上它)。12tar xvf cmake-3.13.20190131-g92bf7.tar.gz cd cmake-3.13.20190131-g92bf7 编译安装cmake，编译过程耗时较长，喝杯茶，耐心等待吧。123.&#x2F;bootstrapgmakesudo gmake install 查看编译后的cmake版本1&#x2F;usr&#x2F;local&#x2F;bin&#x2F;cmake --version 移除原来的cmake版本1sudo yum remove cmake -y 新建软连接1sudo ln -s &#x2F;usr&#x2F;local&#x2F;bin&#x2F;cmake &#x2F;usr&#x2F;bin&#x2F; 终端查看版本，确认安装无误。12$ cmake --versioncmake version 3.13.20190131 出现你安装的CMake版本表示成功！CMake编译、安装完成。 注：如果哪个步骤出错了，可能是没有安装相应的软件包，比如wget、gcc等。缺啥软件包就补安装啥软件包吧，然后继续跟着步骤走，祝一切顺利。 【TODO】创建新项目提示错误：CMake exited with code 1System.Exception: Failed to create a Unix domain socket. Please install ‘socat’ on your Linux machine via ‘sudo apt-get install socat’ or ‘yum install socat’","categories":[{"name":"软件开发","slug":"软件开发","permalink":"https://ddao.wang/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"Cmake","slug":"Cmake","permalink":"https://ddao.wang/tags/Cmake/"},{"name":"Linux","slug":"Linux","permalink":"https://ddao.wang/tags/Linux/"}]},{"title":"在Windows下配置HackRF One环境","slug":"hackrf/hackrf_setup","date":"2019-02-01T09:44:14.000Z","updated":"2020-07-08T09:09:57.106Z","comments":true,"path":"2019/02/01/hackrf/hackrf_setup/","link":"","permalink":"https://ddao.wang/2019/02/01/hackrf/hackrf_setup/","excerpt":"","text":"初次接触到HackRF One是2014年暑假，CSDN正式推出“开源夏令营” 技术公益活动。对于工作多年的我，实际上能接触到这个活动，也是意外。主要原因是平常也常常混迹于CSDN，另外，当时伪基站比较猖獗，知己知彼，在网络搜索无意间，看到这条消息。 多年过去了，现在只在hackrf.net找到当时的时间安排和hackrf的项目提案： 扯远了，言归正传；先利用HackRF接收无线广播FM信号，验证HackRF版是完好无损的。有硬件的同学，一步一步跟着做，保证你能收到FM解调的音频信号。 通过USB连接HackRF和PC，并使用zadig安装驱动。如果识别到设备HackRF One，说明驱动已经安装好了。 安装SDR软件：现在还不是编码开发的时候，先验证设备完好尝尝鲜。 谈到Windows下的SDR软件，大家肯定会想到SDR#，今天给大家介绍PothosSDR，安装包下载：PothosSDR。至于为什么选择它，具体原因后面会谈到。安装完毕，可以在开始菜单看到有多个的工具包。打开CubicSDR工具包，选择HackRF One设备，设置中心频率91.3MHz，就可以看到文章开始的截图，以及FM调频广播音频信号。 HackRF One如果只是拿来收听调频广播，那可就是大材小用。这块开发板可以拿来在很多场合都能发挥出关键作用的。作为一款开源硬件，首先，我们访问GitHub的HackRF项目，认真阅读一遍wiki页。因为你在使用过程中，可能遇到的种种问题，很可能已经有人遇到了，并在wiki中记录解决的方法。 接着，我们就要进行HackRF的编译工作： 下载源码：源码下载，可以使用git cloent，或者直接下载源码包；如果是更新固件，建议下载作者的预编译包，在firmware-bin目录有编译好的固件升级包。源码包目录结构： 源码编译：我的开发环境如下： Win7 x64 Visual Studio 2015 CMakek 3.0+，libusb 1.0，pthreads 2.9.1，fftw 3.3.5以上环境供大家参考，如果编译过程中出现错误，大家可以根据错误信息实际进行相应调整。打开CMake GUI程序，设置源码目录和编译目录，并选择x64位编译。 接着设置libusb、pthreads、fftw库的位置。 分别点击“Configure”，“Generate”，“Open Project”按钮，打开Visual Studio 2015后，选择编译配置(Debug，Release…)，按F7快捷键，编译整个解决方案。如果一切都无误的情况下，将看到如下提示： 12315&gt;------ 已跳过全部重新生成: 项目: INSTALL, 配置: Release x64 ------15&gt;没有为此解决方案配置选中要生成的项目 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 全部重新生成: 成功 13 个，失败 0 个，跳过 2 个 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; INSTALL和uninstall项目需要单独编译生成。生成INSTALL项目，提示如下： 123456789101112131415161&gt;------ 已启动生成: 项目: INSTALL, 配置: Release x64 ------1&gt; -- Install configuration: &quot;Release&quot;1&gt; -- Installing: D:&#x2F;hackrf&#x2F;host&#x2F;INSTALL_x64&#x2F;lib&#x2F;pkgconfig&#x2F;libhackrf.pc1&gt; -- Installing: D:&#x2F;hackrf&#x2F;host&#x2F;INSTALL_x64&#x2F;bin&#x2F;hackrf.lib1&gt; -- Installing: D:&#x2F;hackrf&#x2F;host&#x2F;INSTALL_x64&#x2F;bin&#x2F;hackrf.dll1&gt; -- Installing: D:&#x2F;hackrf&#x2F;host&#x2F;INSTALL_x64&#x2F;bin&#x2F;hackrf_static.lib1&gt; -- Installing: D:&#x2F;hackrf&#x2F;host&#x2F;INSTALL_x64&#x2F;include&#x2F;libhackrf&#x2F;hackrf.h1&gt; -- Installing: D:&#x2F;hackrf&#x2F;host&#x2F;INSTALL_x64&#x2F;bin&#x2F;hackrf_transfer.exe1&gt; -- Installing: D:&#x2F;hackrf&#x2F;host&#x2F;INSTALL_x64&#x2F;bin&#x2F;hackrf_spiflash.exe1&gt; -- Installing: D:&#x2F;hackrf&#x2F;host&#x2F;INSTALL_x64&#x2F;bin&#x2F;hackrf_cpldjtag.exe1&gt; -- Installing: D:&#x2F;hackrf&#x2F;host&#x2F;INSTALL_x64&#x2F;bin&#x2F;hackrf_info.exe1&gt; -- Installing: D:&#x2F;hackrf&#x2F;host&#x2F;INSTALL_x64&#x2F;bin&#x2F;hackrf_debug.exe1&gt; -- Installing: D:&#x2F;hackrf&#x2F;host&#x2F;INSTALL_x64&#x2F;bin&#x2F;hackrf_clock.exe1&gt; -- Installing: D:&#x2F;hackrf&#x2F;host&#x2F;INSTALL_x64&#x2F;bin&#x2F;hackrf_sweep.exe1&gt; -- Installing: D:&#x2F;hackrf&#x2F;host&#x2F;INSTALL_x64&#x2F;bin&#x2F;hackrf_operacake.exe&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 生成: 成功 1 个，失败 0 个，最新 13 个，跳过 0 个 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 在CMake配置的安装目录下，将生成include、lib、bin三个文件夹：其中bin目录下，有以下这些文件，把libusb、pthreads、fftw库的动态链接库文件，拷贝过来，就可以运行这些小工具，进一步熟悉HackRF One硬件了。 生成uninstall项目，提示如下： 1234567891011121314151&gt;------ 已启动生成: 项目: uninstall, 配置: Release x64 ------1&gt; -- Uninstalling &quot;D:&#x2F;hackrf&#x2F;host&#x2F;INSTALL_x64&#x2F;lib&#x2F;pkgconfig&#x2F;libhackrf.pc&quot;1&gt; -- Uninstalling &quot;D:&#x2F;hackrf&#x2F;host&#x2F;INSTALL_x64&#x2F;bin&#x2F;hackrf.lib&quot;1&gt; -- Uninstalling &quot;D:&#x2F;hackrf&#x2F;host&#x2F;INSTALL_x64&#x2F;bin&#x2F;hackrf.dll&quot;1&gt; -- Uninstalling &quot;D:&#x2F;hackrf&#x2F;host&#x2F;INSTALL_x64&#x2F;bin&#x2F;hackrf_static.lib&quot;1&gt; -- Uninstalling &quot;D:&#x2F;hackrf&#x2F;host&#x2F;INSTALL_x64&#x2F;include&#x2F;libhackrf&#x2F;hackrf.h&quot;1&gt; -- Uninstalling &quot;D:&#x2F;hackrf&#x2F;host&#x2F;INSTALL_x64&#x2F;bin&#x2F;hackrf_transfer.exe&quot;1&gt; -- Uninstalling &quot;D:&#x2F;hackrf&#x2F;host&#x2F;INSTALL_x64&#x2F;bin&#x2F;hackrf_spiflash.exe&quot;1&gt; -- Uninstalling &quot;D:&#x2F;hackrf&#x2F;host&#x2F;INSTALL_x64&#x2F;bin&#x2F;hackrf_cpldjtag.exe&quot;1&gt; -- Uninstalling &quot;D:&#x2F;hackrf&#x2F;host&#x2F;INSTALL_x64&#x2F;bin&#x2F;hackrf_info.exe&quot;1&gt; -- Uninstalling &quot;D:&#x2F;hackrf&#x2F;host&#x2F;INSTALL_x64&#x2F;bin&#x2F;hackrf_debug.exe&quot;1&gt; -- Uninstalling &quot;D:&#x2F;hackrf&#x2F;host&#x2F;INSTALL_x64&#x2F;bin&#x2F;hackrf_clock.exe&quot;1&gt; -- Uninstalling &quot;D:&#x2F;hackrf&#x2F;host&#x2F;INSTALL_x64&#x2F;bin&#x2F;hackrf_sweep.exe&quot;1&gt; -- Uninstalling &quot;D:&#x2F;hackrf&#x2F;host&#x2F;INSTALL_x64&#x2F;bin&#x2F;hackrf_operacake.exe&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 生成: 成功 1 个，失败 0 个，最新 1 个，跳过 0 个 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 好了，Windows下配置HackRF One环境，按照以上步骤，基本能顺利完成。如果遇到什么问题，也可以到博主QQ技术群(181849313)进行讨论。","categories":[{"name":"无线电","slug":"无线电","permalink":"https://ddao.wang/categories/%E6%97%A0%E7%BA%BF%E7%94%B5/"},{"name":"开发环境","slug":"无线电/开发环境","permalink":"https://ddao.wang/categories/%E6%97%A0%E7%BA%BF%E7%94%B5/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"}],"tags":[{"name":"HackRF","slug":"HackRF","permalink":"https://ddao.wang/tags/HackRF/"}]},{"title":"Ubuntu下忘记用户名和登录密码的解决方法","slug":"ubuntu_recovery","date":"2019-01-22T18:00:00.000Z","updated":"2020-07-08T09:09:57.122Z","comments":true,"path":"2019/01/22/ubuntu_recovery/","link":"","permalink":"https://ddao.wang/2019/01/22/ubuntu_recovery/","excerpt":"","text":"环境 Ubuntu Server 16.04 x64 问题IT男在生活中总会被各种人误解，不懂IT的亲戚会认为IT行业就是修电脑的或者就是打字的，还有一些朋友会提出各种奇葩的请求，比如帮我写一个游戏外挂吧，帮我破解密码吧，帮我重装系统吧，帮我PS照片吧，甚至帮我清理一下垃圾吧….还有各种想什么就来什么的老板以及一天只能能够修改好几次需求的产品经理。 IT男的生活中确实会面临着各种各样的难题。比如，你遇到过好久没登录的服务器，忘记密码了；或者同事离职，交接时忘记留下开发电脑的账号和密码。如果是Windows系统，IT男可能都有安装系统的U盘，一切还好办。如果是Linux系统，开机需要用户名和密码，这时怎么办呢？ 其实，Linux类系统，只要能摸到服务器，进入系统比Windows还简单！ 解决办法 重新启动系统，直到出现启动菜单； 进入恢复模式(Recovery Mode) 高级启动模式: 选择“Advanced Options for Ubuntu”菜单，进入下一菜单页面； 获取root权限: 选择“Ubuntu，with Linux 4.4.0-87-generic(recovery mode)”菜单,按回车键，系统进入恢复模式，等待直到出现Recovery Menu界面。按向下方向键，选择Drop to root shell prompt ,也就是获取root shell权限。 修改用户密码passwd “user” 查看用户名cat /etc/shadow 建立新用户useradd user 添加至sudo组sudo usermod -aG sudo user 如果以上命令执行出错，有可能是系统以只读模式加载，运行以下命令重新加载卷。mount -o rw,remount /","categories":[{"name":"软件开发","slug":"软件开发","permalink":"https://ddao.wang/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"},{"name":"软件部署","slug":"软件开发/软件部署","permalink":"https://ddao.wang/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/%E8%BD%AF%E4%BB%B6%E9%83%A8%E7%BD%B2/"}],"tags":[{"name":"Ubuntu","slug":"Ubuntu","permalink":"https://ddao.wang/tags/Ubuntu/"},{"name":"系统维护","slug":"系统维护","permalink":"https://ddao.wang/tags/%E7%B3%BB%E7%BB%9F%E7%BB%B4%E6%8A%A4/"}]},{"title":"工业和信息化部发布新版电台执照样式","slug":"new-radio-station-license-2019","date":"2019-01-17T18:00:00.000Z","updated":"2020-07-08T09:09:57.106Z","comments":true,"path":"2019/01/17/new-radio-station-license-2019/","link":"","permalink":"https://ddao.wang/2019/01/17/new-radio-station-license-2019/","excerpt":"","text":"工业和信息化部发布新版《中华人民共和国无线电台执照（地面无线电业务）》样式 为落实中央“放管服”改革要求，规范地面业务无线电台（站）管理，优化审批办事服务，工业和信息化部办公厅日前印发了《关于启用新版&lt;中华人民共和国无线电台执照（地面无线电业务）&gt;的通知》（工信厅无〔2018〕99号），发布了新版地面业务无线电台执照（以下简称《执照》）样式及颁发指南,新版《执照》自2019年7月1日起启用。 新版《执照》落实新修订实施的《中华人民共和国无线电管理条例》要求，对旧版《执照》内容进行了修改完善，在样式和内容设计上既考虑了我国无线电台（站）管理现状和需求，又参考了国外相关国家无线电台执照的样式和内容，并广泛征求了有关方面的意见。《执照》颁发指南对新版《执照》发放程序作了详细说明，有利于规范实施无线电台（站）设置、使用许可行为和提高行政审批效率。为更好地落实“互联网+政务服务”要求，方便用户，便于事中事后监管，新版《执照》引入了信息化手段和技术，在《执照》正本中增加了二维码，并在《执照》颁发指南中明确提出鼓励有条件的省、自治区、直辖市无线电管理机构颁发电子形式的无线电台执照。 此次启用新版《执照》，适应了新形势下进一步加强无线电台（站）管理工作的需要，对于促进无线电频谱资源的合理有效利用具有重要意义。 相关链接：1、 中华人民共和国无线电台执照（地面无线电业务）样式.pdf2、 地面业务无线电台执照颁发指南.pdf","categories":[{"name":"无线电","slug":"无线电","permalink":"https://ddao.wang/categories/%E6%97%A0%E7%BA%BF%E7%94%B5/"},{"name":"新闻动态","slug":"无线电/新闻动态","permalink":"https://ddao.wang/categories/%E6%97%A0%E7%BA%BF%E7%94%B5/%E6%96%B0%E9%97%BB%E5%8A%A8%E6%80%81/"}],"tags":[{"name":"电台执照","slug":"电台执照","permalink":"https://ddao.wang/tags/%E7%94%B5%E5%8F%B0%E6%89%A7%E7%85%A7/"}]},{"title":"GitHub：Announcing unlimited free private repository","slug":"github_free","date":"2019-01-08T08:00:00.000Z","updated":"2020-07-08T09:09:57.106Z","comments":true,"path":"2019/01/08/github_free/","link":"","permalink":"https://ddao.wang/2019/01/08/github_free/","excerpt":"","text":"GitHub被微软收购后的又一大动作，宣布：宣布无限免费私人存储库。原文博客链接 ===以下为博客原文===New year, new GitHub: Announcing unlimited free private repos and unified Enterprise offering Today we’re announcing two major updates to make GitHub more accessible to developers: unlimited free private repositories, and a simpler, unified Enterprise offering. We’re excited about these updates to our Free and Enterprise offerings: GitHub Free now includes unlimited private repositories. For the first time, developers can use GitHub for their private projects with up to three collaborators per repository for free. Many developers want to use private repos to apply for a job, work on a side project, or try something out in private before releasing it publicly. Starting today, those scenarios, and many more, are possible on GitHub at no cost. Public repositories are still free (of course—no changes there) and include unlimited collaborators. GitHub Enterprise is the new unified product for Enterprise Cloud (formerly GitHub Business Cloud) and Enterprise Server (formerly GitHub Enterprise). Organizations that want the flexibility to use GitHub in a cloud or self-hosted configuration can now access both at one per-seat price. And with GitHub Connect, these products can be securely linked, providing a hybrid option so developers can work seamlessly across both environments. Learn more GitHub Pro (formerly GitHub Developer) and GitHub Team are also available for developers and teams who need professional coding and collaboration features. And of course, open source contributors will still have everything they need to collaborate on public repositories, including our free version of GitHub Team.Whether you’re a student about to write your first line of code, an enterprise leader with teams around the world, or an open source maintainer, we want GitHub to be the best place for you to code, collaborate, and connect with the global community of developers. Today’s changes are a big investment in the future of GitHub, and we’re excited to see what you build in 2019.","categories":[{"name":"软件开发","slug":"软件开发","permalink":"https://ddao.wang/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"},{"name":"新闻动态","slug":"软件开发/新闻动态","permalink":"https://ddao.wang/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/%E6%96%B0%E9%97%BB%E5%8A%A8%E6%80%81/"}],"tags":[{"name":"GitHub","slug":"GitHub","permalink":"https://ddao.wang/tags/GitHub/"}]}],"categories":[{"name":"软件开发","slug":"软件开发","permalink":"https://ddao.wang/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"},{"name":"软件部署","slug":"软件开发/软件部署","permalink":"https://ddao.wang/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/%E8%BD%AF%E4%BB%B6%E9%83%A8%E7%BD%B2/"},{"name":"无线电","slug":"无线电","permalink":"https://ddao.wang/categories/%E6%97%A0%E7%BA%BF%E7%94%B5/"},{"name":"开发环境","slug":"无线电/开发环境","permalink":"https://ddao.wang/categories/%E6%97%A0%E7%BA%BF%E7%94%B5/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"},{"name":"新闻动态","slug":"无线电/新闻动态","permalink":"https://ddao.wang/categories/%E6%97%A0%E7%BA%BF%E7%94%B5/%E6%96%B0%E9%97%BB%E5%8A%A8%E6%80%81/"},{"name":"新闻动态","slug":"软件开发/新闻动态","permalink":"https://ddao.wang/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/%E6%96%B0%E9%97%BB%E5%8A%A8%E6%80%81/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://ddao.wang/tags/linux/"},{"name":"nginx","slug":"nginx","permalink":"https://ddao.wang/tags/nginx/"},{"name":"yum","slug":"yum","permalink":"https://ddao.wang/tags/yum/"},{"name":"Windows","slug":"Windows","permalink":"https://ddao.wang/tags/Windows/"},{"name":"C/Cpp","slug":"C-Cpp","permalink":"https://ddao.wang/tags/C-Cpp/"},{"name":"VSCode","slug":"VSCode","permalink":"https://ddao.wang/tags/VSCode/"},{"name":"MariaDB","slug":"MariaDB","permalink":"https://ddao.wang/tags/MariaDB/"},{"name":"CentOS","slug":"CentOS","permalink":"https://ddao.wang/tags/CentOS/"},{"name":"LNMP","slug":"LNMP","permalink":"https://ddao.wang/tags/LNMP/"},{"name":"-PHP","slug":"PHP","permalink":"https://ddao.wang/tags/PHP/"},{"name":"PHP","slug":"PHP","permalink":"https://ddao.wang/tags/PHP/"},{"name":"VS Code","slug":"VS-Code","permalink":"https://ddao.wang/tags/VS-Code/"},{"name":"Cmake","slug":"Cmake","permalink":"https://ddao.wang/tags/Cmake/"},{"name":"Linux","slug":"Linux","permalink":"https://ddao.wang/tags/Linux/"},{"name":"HackRF","slug":"HackRF","permalink":"https://ddao.wang/tags/HackRF/"},{"name":"Ubuntu","slug":"Ubuntu","permalink":"https://ddao.wang/tags/Ubuntu/"},{"name":"系统维护","slug":"系统维护","permalink":"https://ddao.wang/tags/%E7%B3%BB%E7%BB%9F%E7%BB%B4%E6%8A%A4/"},{"name":"电台执照","slug":"电台执照","permalink":"https://ddao.wang/tags/%E7%94%B5%E5%8F%B0%E6%89%A7%E7%85%A7/"},{"name":"GitHub","slug":"GitHub","permalink":"https://ddao.wang/tags/GitHub/"}]}